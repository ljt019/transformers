use crate::core::ToolError;
use std::collections::HashMap;

/// Strategy for handling tool errors.
#[derive(Debug, Clone)]
pub enum ErrorStrategy {
    /// Stop execution and return the error (default behavior).
    Fail,
    /// Pass the error message to the model and let it decide how to respond.
    ReturnToModel,
}

impl Default for ErrorStrategy {
    fn default() -> Self {
        Self::Fail
    }
}

pub trait ToolCalling {
    fn register_tool(&mut self, tool: Tool) -> anyhow::Result<()>;
    fn unregister_tool(&mut self, name: &str) -> anyhow::Result<()>;
    fn clear_tools(&mut self) -> anyhow::Result<()>;
    fn registered_tools(&self) -> Vec<Tool>;
    fn call_tool(
        &mut self,
        tool_name: String,
        parameters: HashMap<String, String>,
    ) -> Result<String, ToolError>;
}

#[derive(Clone, serde::Serialize)]
#[allow(clippy::type_complexity)]
pub struct Tool {
    pub(crate) name: String,
    pub(crate) description: String,
    pub(crate) parameters: HashMap<String, String>,
    #[serde(skip_serializing)]
    pub(crate) function:
        fn(parameters: HashMap<String, String>) -> Result<String, ToolError>,
    #[serde(skip_serializing)]
    pub(crate) error_strategy: ErrorStrategy,
    #[serde(skip_serializing)]
    pub(crate) max_retries: u32,
}

impl Tool {
    /// Create a new tool description that can be registered with a model.
    pub fn new(
        name: String,
        description: String,
        parameters: HashMap<String, String>,
        function: fn(
            parameters: HashMap<String, String>,
        ) -> Result<String, ToolError>,
        error_strategy: ErrorStrategy,
        max_retries: u32,
    ) -> Self {
        Self {
            name,
            description,
            parameters,
            function,
            error_strategy,
            max_retries,
        }
    }

    /// Get the tool name.
    pub fn name(&self) -> &str {
        &self.name
    }

    /// Execute the tool with the given parameters, returning its result.
    pub fn call(
        &self,
        parameters: HashMap<String, String>,
    ) -> Result<String, ToolError> {
        (self.function)(parameters)
    }

    /// Get a reference to the declared parameters schema.
    pub fn parameters(&self) -> &HashMap<String, String> {
        &self.parameters
    }

    /// Get the description of the tool.
    pub fn description(&self) -> &str {
        &self.description
    }

    /// Get the error strategy for this tool.
    pub fn error_strategy(&self) -> &ErrorStrategy {
        &self.error_strategy
    }

    /// Get the maximum number of retries for this tool.
    pub fn max_retries(&self) -> u32 {
        self.max_retries
    }
}

/// Local trait to convert various user-facing representations into a [`Tool`].
/// Having our own trait lets us implement it for function pointers generated by
/// the `#[tool]` macro without violating Rust's orphan rules.
pub trait IntoTool {
    fn into_tool(self) -> Tool;
}

impl IntoTool for Tool {
    fn into_tool(self) -> Tool {
        self
    }
}
